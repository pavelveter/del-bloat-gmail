#!/usr/bin/env python3
from __future__ import print_function
import os
import sys
import pickle
import time
from textwrap import dedent
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π ANSI-—Ä–µ–∂–∏–º –¥–ª—è Windows (—Ü–≤–µ—Ç–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫)
try:
    from colorama import init as colorama_init
    colorama_init()
except ImportError:
    pass

SCOPES = ["https://www.googleapis.com/auth/gmail.modify"]
BLOAT_FILE = "list-bloat.txt"
WHITE_FILE = "list-white.txt"


def show_help():
    print(
        dedent(
            f"""
            üì¨ Gmail Bloat Cleaner ‚Äî –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º

            –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
              python {os.path.basename(__file__)} run     # –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É
              python {os.path.basename(__file__)} help    # –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

            üìÇ –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
              ‚Ä¢ {BLOAT_FILE} ‚Äî —Ñ–∏–ª—å—Ç—Ä—ã –ø–∏—Å–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
              ‚Ä¢ {WHITE_FILE} ‚Äî –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ (–Ω–µ —Ç—Ä–æ–≥–∞—Ç—å)

            –ü—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–æ–∫:
              unsubscribe
              "–ó–∞ –ø–æ–∫—É–ø–∫—É –æ—Ç" "—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"
              mail:receipt@kari.com
              subject:(GitHub)

            –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:
              mail:support@zomro.com
              subject:(Apple)
              "Google One"

            ‚öôÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º:
              ‚Ä¢ –∏—â–µ—Ç –ø–∏—Å—å–º–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –∏–∑ {BLOAT_FILE}
              ‚Ä¢ –∏—Å–∫–ª—é—á–∞–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–∑ {WHITE_FILE}
              ‚Ä¢ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ ‚Üí –∫–æ—Ä–∑–∏–Ω–∞ (TRASH)
              ‚Ä¢ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π live-–≤—ã–≤–æ–¥, –±–µ–∑ "–≤–∏—Å—è—á–∏—Ö" ‚ùå
            """
        ).strip()
    )
    sys.exit(0)


def get_service():
    creds = None
    if os.path.exists("token.pickle"):
        with open("token.pickle", "rb") as token:
            creds = pickle.load(token)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                "client_secret.json", SCOPES
            )
            creds = flow.run_local_server(port=0)
        with open("token.pickle", "wb") as token:
            pickle.dump(creds, token)
    return build("gmail", "v1", credentials=creds)


def ensure_default_files():
    if not os.path.exists(BLOAT_FILE):
        with open(BLOAT_FILE, "w", encoding="utf-8") as f:
            f.write(
                "# –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Å–µ–º\n"
                "unsubscribe\n–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
                "\"–ó–∞ –ø–æ–∫—É–ø–∫—É –æ—Ç\" \"—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç\"\n"
                "mail:receipt@kari.com\n"
            )
    if not os.path.exists(WHITE_FILE):
        with open(WHITE_FILE, "w", encoding="utf-8") as f:
            f.write(
                "# –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å\n"
                "mail:support@zomro.com\nsubject:(Apple)\n\"Google One\"\n"
            )


def read_filters(path):
    with open(path, "r", encoding="utf-8") as f:
        filters = []
        for line in f:
            s = line.strip()
            if not s or s.startswith("#"):
                continue
            if s.lower().startswith("mail:"):
                s = f"from:{s.split(':', 1)[1].strip()}"
            filters.append(s)
        return filters


def move_batch(service, msg_ids):
    if not msg_ids:
        return
    body = {"ids": msg_ids, "addLabelIds": ["TRASH"], "removeLabelIds": []}
    service.users().messages().batchModify(userId="me", body=body).execute()


def search_messages(service, query):
    results = service.users().messages().list(userId="me", q=query, maxResults=500).execute()
    messages = results.get("messages", [])
    while "nextPageToken" in results:
        results = service.users().messages().list(
            userId="me", q=query, pageToken=results["nextPageToken"], maxResults=500
        ).execute()
        messages.extend(results.get("messages", []))
    return [m["id"] for m in messages]


def process_query(service, query, whitelist):
    """Live-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ"""
    def update_line(text):
        print(f"\r\033[K{text}", end="", flush=True)

    update_line(f"üîç {query}")
    ids = search_messages(service, query)

    if not ids:
        update_line(f"üîç {query} ‚Äî ‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        time.sleep(0.25)
        return 0

    white_ids = set()
    for w in whitelist:
        white_ids.update(search_messages(service, w))

    real_targets = [i for i in ids if i not in white_ids]

    if not real_targets:
        update_line(f"üîç {query} ‚Äî ‚ö™ –í –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ.")
        print()
        time.sleep(0.25)
        return 0

    for i in range(0, len(real_targets), 100):
        move_batch(service, real_targets[i : i + 100])

    update_line(f"üîç {query} ‚Äî ‚úÖ {len(real_targets)} –ø–∏—Å–µ–º ‚Üí –∫–æ—Ä–∑–∏–Ω–∞.")
    print()
    time.sleep(0.2)
    return len(real_targets)


def main():
    if len(sys.argv) == 1 or sys.argv[1] in {"-h", "--help", "help"}:
        show_help()

    if sys.argv[1] != "run":
        print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π `python delete_bloat_mail.py help`.")
        sys.exit(1)

    ensure_default_files()
    service = get_service()
    bloat_filters = read_filters(BLOAT_FILE)
    white_filters = read_filters(WHITE_FILE)

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(bloat_filters)} —Ñ–∏–ª—å—Ç—Ä–æ–≤, {len(white_filters)} –∏—Å–∫–ª—é—á–µ–Ω–∏–π.\n")

    start = time.time()
    total = 0

    for i, q in enumerate(bloat_filters, start=1):
        total += process_query(service, q, white_filters)

    # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ ‚ùå
    print("\r\033[K", end="", flush=True)

    elapsed = time.time() - start
    print(f"\nüéØ –í—Å–µ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {total}")
    print(f"‚è± –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {elapsed:.2f} —Å–µ–∫.\n")


if __name__ == "__main__":
    main()
